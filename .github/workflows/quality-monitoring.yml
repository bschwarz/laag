name: Quality Monitoring

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  quality-report:
    name: Generate Quality Report
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate quality metrics
        run: |
          echo "# Quality Report - $(date)" > quality-report.md
          echo "" >> quality-report.md

          echo "## Type Coverage" >> quality-report.md
          bun run type-check 2>&1 | tee -a quality-report.md || true
          echo "" >> quality-report.md

          echo "## Lint Results" >> quality-report.md
          bun run lint --format=compact 2>&1 | tee -a quality-report.md || true
          echo "" >> quality-report.md

          echo "## Test Coverage" >> quality-report.md
          bun test --coverage 2>&1 | tee -a quality-report.md || true
          echo "" >> quality-report.md

          echo "## Bundle Size Analysis" >> quality-report.md
          if [ -d "packages/openapi/dist" ]; then
            echo "### OpenAPI Package" >> quality-report.md
            du -h packages/openapi/dist/* | tee -a quality-report.md
          fi
          echo "" >> quality-report.md

      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report-${{ github.run_number }}
          path: quality-report.md
          retention-days: 30

      - name: Comment on latest PR (if exists)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');

            // Find the most recent open PR
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              direction: 'desc',
              per_page: 1
            });

            if (prs.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prs[0].number,
                body: `## ðŸ“Š Daily Quality Report\n\n\`\`\`\n${report}\n\`\`\``
              });
            }

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: |
          echo "Running security audit..."
          bun audit --json > audit-results.json || true

      - name: Process audit results
        run: |
          if [ -f "audit-results.json" ]; then
            echo "Security audit completed"
            # Process results and create summary
            echo "ðŸ“‹ Audit summary would be generated here"
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.run_number }}
          path: audit-results.json
          retention-days: 90
