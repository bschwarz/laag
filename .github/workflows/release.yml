name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., patch, minor, major, or specific version like 2.1.0)'
        required: true
        default: 'patch'
        type: string
      dry-run:
        description: 'Dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

jobs:
  release:
    name: Release Packages
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run quality checks
        run: bun run quality

      - name: Run tests
        run: bun test

      - name: Build packages
        run: bun run build

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Version packages
        run: |
          echo "Versioning packages..."
          if [[ "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Specific version provided
            npx lerna version ${{ inputs.version }} --yes --no-push
          else
            # Semantic version bump
            npx lerna version ${{ inputs.version }} --yes --no-push
          fi

      - name: Generate changelog
        run: |
          echo "Generating changelog..."
          # Add changelog generation logic here
          echo "üìù Changelog would be generated here"

      - name: Create GitHub Release
        if: ${{ !inputs.dry-run }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the new version
          NEW_VERSION=$(node -p "require('./lerna.json').version")

          # Create GitHub release
          gh release create "v${NEW_VERSION}" \
            --title "Release v${NEW_VERSION}" \
            --notes "Release v${NEW_VERSION}" \
            --generate-notes

      - name: Publish to NPM
        if: ${{ !inputs.dry-run }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing packages to NPM..."
          npx lerna publish from-package --yes

      - name: Push version changes
        if: ${{ !inputs.dry-run }}
        run: |
          git push origin main --follow-tags

      - name: Dry run summary
        if: ${{ inputs.dry-run }}
        run: |
          echo "üîç DRY RUN COMPLETED"
          echo "The following would have been published:"
          npx lerna list --all
          echo ""
          echo "Version would have been bumped to: ${{ inputs.version }}"
          echo "No actual publishing or tagging occurred."
